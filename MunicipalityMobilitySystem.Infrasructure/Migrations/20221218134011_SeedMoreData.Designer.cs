// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MunicipalityMobilitySystem.Data;

#nullable disable

namespace MunicipalityMobilitySystem.Infrasructure.Migrations
{
    [DbContext(typeof(MunicipalityMobilitySystemDbContext))]
    [Migration("20221218134011_SeedMoreData")]
    partial class SeedMoreData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11db5be7-6e3e-4811-a150-9e248044789a",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@mail.com",
                            NormalizedUserName = "guest@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEB+Lgtysb9Do57BwjQ1tcR5pW3oqhibP48pRnrJmFZWUVK3cCRjW3bQPCZY9nwwydg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77216193-5282-454d-a838-6522b7ece3d8",
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Bike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsForCleaning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForRepearing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeedDayExchangeVehicleCard")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeedHelmet")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerHour")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("RenterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VehicleParkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VehicleParkId");

                    b.ToTable("Bikes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Description = "A very good transport solution for sport people.",
                            ImageUrl = "https://www.google.com/imgres?imgurl=https%3A%2F%2Fwww.home-max.bg%2Fstatic%2Fmedia%2Fups%2Fproducts%2Fmain%2F06054168_y.JPG%3Fv%3D0.31&imgrefurl=https%3A%2F%2Fwww.home-max.bg%2Faluminiev-mtb-velosiped-passati-24%2F&tbnid=2yQM2U2uluMNsM&vet=12ahUKEwiCgv78nYP8AhWFIMUKHXm7AhMQMygGegUIARDNAQ..i&docid=18h343pFLn71EM&w=4613&h=2843&q=Passaty&ved=2ahUKEwiCgv78nYP8AhWFIMUKHXm7AhMQMygGegUIARDNAQ",
                            IsForCleaning = false,
                            IsForRepearing = false,
                            IsNeedDayExchangeVehicleCard = false,
                            IsNeedHelmet = false,
                            PricePerHour = 4.00m,
                            Rating = 4,
                            Type = "Passati",
                            VehicleParkId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "A realy good transport solution for sport people.",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTuinQIdRNjDVnCddYQFkMkFIkt3cyXVfVqPA&usqp=CAU",
                            IsForCleaning = false,
                            IsForRepearing = false,
                            IsNeedDayExchangeVehicleCard = false,
                            IsNeedHelmet = false,
                            PricePerHour = 5.00m,
                            Rating = 5,
                            Type = "Cross",
                            VehicleParkId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "A very good luxury transport solution for beasy people.",
                            ImageUrl = "https://www.google.com/imgres?imgurl=https%3A%2F%2Fcyclist.b-cdn.net%2Fsites%2Fcyclist%2Ffiles%2Fstyles%2Farticle_main_wide_image%2Fpublic%2F2021%2F11%2Fpinarello-dogma-f-1.jpg%3Fitok%3DhYRlGtTu&imgrefurl=https%3A%2F%2Fwww.cyclist.co.uk%2Fin-depth%2F10256%2Fwhat-is-a-road-bike&tbnid=_oCCGbIDpZdqDM&vet=12ahUKEwihuZSjnoP8AhUBtaQKHckKCJ4QMygDegUIARDMAQ..i&docid=zcxxLnqOLHXrGM&w=1240&h=698&q=road%20bike&ved=2ahUKEwihuZSjnoP8AhUBtaQKHckKCJ4QMygDegUIARDMAQ",
                            IsForCleaning = false,
                            IsForRepearing = false,
                            IsNeedDayExchangeVehicleCard = false,
                            IsNeedHelmet = false,
                            PricePerHour = 7.00m,
                            Rating = 6,
                            Type = "Pinarello",
                            VehicleParkId = 1
                        });
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsForCleaning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForRepearing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeedDayBlueCard")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerHour")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("RenterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VehicleParkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VehicleParkId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Description = "A realy good and luxury transport solution.",
                            EngineType = "Petrol",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRFiWMRzQZJ4dYjRVlv-l25KWCVweGaWbIJOA&usqp=CAU",
                            IsForCleaning = false,
                            IsForRepearing = false,
                            IsNeedDayBlueCard = false,
                            PricePerHour = 25.00m,
                            Rating = 6,
                            Type = "Mercedes CLS 180",
                            VehicleParkId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            Description = "A realy good and transport solution for a big family.",
                            EngineType = "Diesel",
                            ImageUrl = "https://www.google.com/imgres?imgurl=https%3A%2F%2Fkolalok.com%2Fnewimage%2Fsmall%2F2015-touran-ii-volkswagen.jpg&imgrefurl=https%3A%2F%2Fkolalok.com%2Fgabariti%2Fvolkswagen%2Ftouran.html&tbnid=vv3QuTgJq6H87M&vet=12ahUKEwicyeOinIP8AhXFwQIHHR6MAcIQMygNegUIARDbAQ..i&docid=Cv2JajDnUh_gbM&w=322&h=215&q=Wv%20toaran&ved=2ahUKEwicyeOinIP8AhXFwQIHHR6MAcIQMygNegUIARDbAQ",
                            IsForCleaning = false,
                            IsForRepearing = false,
                            IsNeedDayBlueCard = false,
                            PricePerHour = 23.00m,
                            Rating = 5,
                            Type = "VW Touran",
                            VehicleParkId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "A very good and transport solution for a city center.",
                            EngineType = "Electric",
                            ImageUrl = "https://www.google.com/imgres?imgurl=https%3A%2F%2Fwww.ultimatespecs.com%2Fcargallery%2F67%2F4854%2Fw400_Hyundai-Eon-2.jpg&imgrefurl=https%3A%2F%2Fwww.ultimatespecs.com%2Fbg%2Fcar-specs%2FHyundai%2F14708%2FHyundai-Eon-08-MPi.html&tbnid=2p0LKtPnAW8CPM&vet=12ahUKEwjzidSanYP8AhWSNewKHTg5CxIQMygCegUIARC9AQ..i&docid=ZGGa2cS6QA17DM&w=400&h=225&itg=1&q=hunday%20eon&ved=2ahUKEwjzidSanYP8AhWSNewKHTg5CxIQMygCegUIARC9AQ",
                            IsForCleaning = false,
                            IsForRepearing = false,
                            IsNeedDayBlueCard = false,
                            PricePerHour = 20.00m,
                            Rating = 4,
                            Type = "Hynday EON",
                            VehicleParkId = 1
                        });
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categorys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Small",
                            Size = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Middle",
                            Size = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Large",
                            Size = 0
                        });
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Scooter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsForCleaning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForRepearing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeedDayExchangeVehicleCard")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeedHelmet")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerHour")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("RenterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VehicleParkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VehicleParkId");

                    b.ToTable("Scooters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "A very good transport solution for a city center.",
                            EngineType = "Petrol",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT4TbIp4RJgECS2py-M_zNjwLrXYIbcZ07XQA&usqp=CAU",
                            IsForCleaning = false,
                            IsForRepearing = false,
                            IsNeedDayExchangeVehicleCard = false,
                            IsNeedHelmet = false,
                            PricePerHour = 9.00m,
                            Rating = 6,
                            RenterId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            Type = "Vespa",
                            VehicleParkId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "A realy good transport solution for a city center.",
                            EngineType = "Petrol",
                            ImageUrl = "https://www.google.com/imgres?imgurl=https%3A%2F%2Fcdn.motor1.com%2Fimages%2Fmgl%2FP3GnXX%2Fs3%2F2022-vespa-elettrica-red---main.jpg&imgrefurl=https%3A%2F%2Fwww.rideapart.com%2Fnews%2F562600%2Fvespa-brand-906million-euros%2F&tbnid=CPQTR3BmwOmqPM&vet=12ahUKEwiTi8mXn4P8AhUYxgIHHRheDBwQMygQegUIARDWAQ..i&docid=oNKLqZ2kpDMT7M&w=1280&h=720&q=Piaggo&ved=2ahUKEwiTi8mXn4P8AhUYxgIHHRheDBwQMygQegUIARDWAQ",
                            IsForCleaning = false,
                            IsForRepearing = false,
                            IsNeedDayExchangeVehicleCard = false,
                            IsNeedHelmet = false,
                            PricePerHour = 10.00m,
                            Rating = 5,
                            RenterId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            Type = "Piaggo",
                            VehicleParkId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "Exellent transport solution for a city center.",
                            EngineType = "Electric",
                            ImageUrl = "https://www.google.com/imgres?imgurl=https%3A%2F%2Fbg.e-scooter.co%2Fi%2F96%2F0c%2F0a%2F95d8f798a27fb6ad77c11b8ec2.jpg&imgrefurl=https%3A%2F%2Fbg.e-scooter.co%2Fpiaggio-one%2F&tbnid=5Mt_ltA3Pdl3sM&vet=12ahUKEwiTi8mXn4P8AhUYxgIHHRheDBwQMygBegUIARC3AQ..i&docid=zsJorUwAg6RoyM&w=753&h=771&q=Piaggo&ved=2ahUKEwiTi8mXn4P8AhUYxgIHHRheDBwQMygBegUIARC3AQ",
                            IsForCleaning = false,
                            IsForRepearing = false,
                            IsNeedDayExchangeVehicleCard = false,
                            IsNeedHelmet = false,
                            PricePerHour = 11.00m,
                            Rating = 5,
                            RenterId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            Type = "Piaggo",
                            VehicleParkId = 1
                        });
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Truck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsForCleaning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForRepearing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeedDayBlueCard")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerHour")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("RenterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VehicleParkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VehicleParkId");

                    b.ToTable("Trucks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 3,
                            Description = "A realy good transport solution for a big cargos.",
                            EngineType = "Diesel",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQb4pdFmd8vMzEsFxaFaonBFAQhs3EA2P9r_Q&usqp=CAU",
                            IsForCleaning = false,
                            IsForRepearing = false,
                            IsNeedDayBlueCard = false,
                            PricePerHour = 40.00m,
                            Rating = 5,
                            Type = "Scania",
                            VehicleParkId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            Description = "Excelent transport solution for a big cargos.",
                            EngineType = "Diesel",
                            ImageUrl = "https://www.google.com/imgres?imgurl=https%3A%2F%2Fwww.kamioni.bg%2Fpictures%2F29618_2_scania%2Bbev2-650.jpg&imgrefurl=https%3A%2F%2Fwww.kamioni.bg%2Fmenu%2F10%2Fpost%2F29618%2FScania-predstavq-nova-gama-e-kamioni-za-regionalen-transport&tbnid=jkhfmffUYxtEHM&vet=12ahUKEwjcu_iPmIP8AhW2lv0HHavxCNsQMygGegUIARDOAQ..i&docid=iugoRchY4ROK5M&w=650&h=438&q=Scania&ved=2ahUKEwjcu_iPmIP8AhW2lv0HHavxCNsQMygGegUIARDOAQ",
                            IsForCleaning = false,
                            IsForRepearing = false,
                            IsNeedDayBlueCard = false,
                            PricePerHour = 50.00m,
                            Rating = 6,
                            Type = "Mercedes",
                            VehicleParkId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "A very good transport solution for a big cargos.",
                            EngineType = "Diesel",
                            ImageUrl = "https://www.google.com/imgres?imgurl=https%3A%2F%2Fwww.volvotrucks.us%2F-%2Fmedia%2Fvtna%2Fimages%2Fshared%2Ftab-content%2Fvnl%2Ftabbed-feature%2Fvolvo-vnl-25th-aerodynamics.jpg%3Fh%3D410%26w%3D725%26rev%3D4a1b9e19a65e418ba2bcffc4b952005a%26hash%3D78C61F2B39C62E7464AAA1FC051487C0&imgrefurl=https%3A%2F%2Fwww.volvotrucks.us%2Ftrucks%2Fvnl%2F&tbnid=4lteSbMPeJB2jM&vet=12ahUKEwjSvPvKmYP8AhU5nP0HHaRzDFsQMygPegUIARDkAQ..i&docid=cXhpx2BnsyvK8M&w=725&h=410&q=volvo%20truck%202021&ved=2ahUKEwjSvPvKmYP8AhU5nP0HHaRzDFsQMygPegUIARDkAQ",
                            IsForCleaning = false,
                            IsForRepearing = false,
                            IsNeedDayBlueCard = false,
                            PricePerHour = 35.00m,
                            Rating = 4,
                            Type = "Volvo",
                            VehicleParkId = 1
                        });
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.VehiclePark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ParkName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("VehicleParks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ParkName = "Central"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Bike", b =>
                {
                    b.HasOne("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Category", "Category")
                        .WithMany("Bikes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MunicipalityMobilitySystem.Infrasructure.Data.Entities.VehiclePark", "VehiclePark")
                        .WithMany("Bikes")
                        .HasForeignKey("VehicleParkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("VehiclePark");
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Car", b =>
                {
                    b.HasOne("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Category", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MunicipalityMobilitySystem.Infrasructure.Data.Entities.VehiclePark", "VehiclePark")
                        .WithMany("Cars")
                        .HasForeignKey("VehicleParkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("VehiclePark");
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Scooter", b =>
                {
                    b.HasOne("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Category", "Category")
                        .WithMany("Scooters")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MunicipalityMobilitySystem.Infrasructure.Data.Entities.VehiclePark", "VehiclePark")
                        .WithMany("Scooters")
                        .HasForeignKey("VehicleParkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("VehiclePark");
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Truck", b =>
                {
                    b.HasOne("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Category", "Category")
                        .WithMany("Trucks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MunicipalityMobilitySystem.Infrasructure.Data.Entities.VehiclePark", "VehiclePark")
                        .WithMany("Trucks")
                        .HasForeignKey("VehicleParkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("VehiclePark");
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Category", b =>
                {
                    b.Navigation("Bikes");

                    b.Navigation("Cars");

                    b.Navigation("Scooters");

                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.VehiclePark", b =>
                {
                    b.Navigation("Bikes");

                    b.Navigation("Cars");

                    b.Navigation("Scooters");

                    b.Navigation("Trucks");
                });
#pragma warning restore 612, 618
        }
    }
}
