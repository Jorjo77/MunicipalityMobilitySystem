// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MunicipalityMobilitySystem.Data;

#nullable disable

namespace MunicipalityMobilitySystem.Infrasructure.Migrations
{
    [DbContext(typeof(MunicipalityMobilitySystemDbContext))]
    partial class MunicipalityMobilitySystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f59e4d5d-e001-4682-bf0c-087084f94cb2",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@mail.com",
                            NormalizedUserName = "guest@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBz+Dc55CM+PU8QlpyOXvzzcM9jxgOeAbLCjHgkQY6uK6BSJPra+KYtYYbW1p/Vl5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51c015fd-9930-4024-bffe-ec5745dd077e",
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categorys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bike"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Scooter"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Car"
                        });
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.PartsOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DeliveryTerm")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("PartsOrder");
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.RepairCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VehicleParkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleParkId");

                    b.ToTable("RepairCenter");
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FailureDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForCleaning")
                        .HasColumnType("bit");

                    b.Property<bool>("ForRepearing")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PricePerHour")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan?>("RentedPeriod")
                        .HasColumnType("time");

                    b.Property<string>("RenterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RepairCenterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RepairingTerm")
                        .HasColumnType("datetime2");

                    b.Property<int>("RepairsCount")
                        .HasColumnType("int");

                    b.Property<int>("VehicleParkId")
                        .HasColumnType("int");

                    b.Property<int?>("WashingCenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RepairCenterId");

                    b.HasIndex("VehicleParkId");

                    b.HasIndex("WashingCenterId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Description = "Exellent transport solution for a city center.",
                            EngineType = "Electric",
                            ForCleaning = false,
                            ForRepearing = false,
                            ImageUrl = "https://bg.e-scooter.co/i/17/72/ed/d5015b9723a5397c924e7b797d.jpg",
                            IsActive = true,
                            Model = "Piaggo",
                            PricePerHour = 11.00m,
                            Rating = 5,
                            RegistrationNumber = "Sk000001",
                            RenterId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            RentsCount = 0,
                            RepairsCount = 0,
                            VehicleParkId = 2
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "A realy good transport solution for a city.",
                            EngineType = "Petrol",
                            ForCleaning = false,
                            ForRepearing = false,
                            ImageUrl = "https://images.piaggio.com/piaggio/vehicles/nclp000u15/nclp8znu15/nclp8znu15-01-s.png",
                            IsActive = true,
                            Model = "Piaggo",
                            PricePerHour = 10.00m,
                            Rating = 5,
                            RegistrationNumber = "Sk000002",
                            RenterId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            RentsCount = 0,
                            RepairsCount = 0,
                            VehicleParkId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "A very good transport solution for a city and center.",
                            EngineType = "Petrol",
                            ForCleaning = false,
                            ForRepearing = false,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT4TbIp4RJgECS2py-M_zNjwLrXYIbcZ07XQA&usqp=CAU",
                            IsActive = true,
                            Model = "Vespa",
                            PricePerHour = 9.00m,
                            Rating = 6,
                            RegistrationNumber = "Sk000003",
                            RenterId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            RentsCount = 0,
                            RepairsCount = 0,
                            VehicleParkId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "A very good transport solution for sport people.",
                            ForCleaning = false,
                            ForRepearing = false,
                            ImageUrl = "https://www.home-max.bg/static/media/ups/cached/781e8afa44a58ec261abdd83455444f5c203f4c5.jpg",
                            IsActive = true,
                            Model = "Passati",
                            PricePerHour = 4.00m,
                            Rating = 4,
                            RegistrationNumber = "B000001",
                            RentsCount = 0,
                            RepairsCount = 0,
                            VehicleParkId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "A very good luxury transport solution for beasy people.",
                            ForCleaning = false,
                            ForRepearing = false,
                            ImageUrl = "https://hips.hearstapps.com/hmg-prod/images/pinarello-dogma-f-tested-1624463882.jpg?crop=1.00xw:0.807xh;0,0.0629xh&resize=2048:*",
                            IsActive = true,
                            Model = "Pinarello",
                            PricePerHour = 7.00m,
                            Rating = 6,
                            RegistrationNumber = "B000002",
                            RentsCount = 0,
                            RepairsCount = 0,
                            VehicleParkId = 2
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Description = "A realy good transport solution for sport people.",
                            ForCleaning = false,
                            ForRepearing = false,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTuinQIdRNjDVnCddYQFkMkFIkt3cyXVfVqPA&usqp=CAU",
                            IsActive = true,
                            Model = "Cross",
                            PricePerHour = 5.00m,
                            Rating = 5,
                            RegistrationNumber = "B000003",
                            RentsCount = 0,
                            RepairsCount = 0,
                            VehicleParkId = 3
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Description = "A very good and transport solution for a city center.",
                            EngineType = "Electric",
                            ForCleaning = false,
                            ForRepearing = false,
                            ImageUrl = "https://imgd.aeplcdn.com/1056x594/cw/ec/9692/Hyundai-Eon-Right-Front-Three-Quarter-94097.jpg?v=201711021421&q=75&wm=1",
                            IsActive = true,
                            Model = "Hynday EON",
                            PricePerHour = 20.00m,
                            Rating = 4,
                            RegistrationNumber = "C000001",
                            RentsCount = 0,
                            RepairsCount = 0,
                            VehicleParkId = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            Description = "A realy good and transport solution for a big family.",
                            EngineType = "Diesel",
                            ForCleaning = false,
                            ForRepearing = false,
                            ImageUrl = "https://www.topgear.com/sites/default/files/cars-car/carousel/2016/03/vw_7422.jpg?w=976&h=549",
                            IsActive = true,
                            Model = "VW Touran",
                            PricePerHour = 23.00m,
                            Rating = 5,
                            RegistrationNumber = "C000002",
                            RentsCount = 0,
                            RepairsCount = 0,
                            VehicleParkId = 2
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Description = "A realy good and luxury transport solution.",
                            EngineType = "Petrol",
                            ForCleaning = false,
                            ForRepearing = false,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRFiWMRzQZJ4dYjRVlv-l25KWCVweGaWbIJOA&usqp=CAU",
                            IsActive = true,
                            Model = "Mercedes CLS 180",
                            PricePerHour = 25.00m,
                            Rating = 6,
                            RegistrationNumber = "C000003",
                            RentsCount = 0,
                            RepairsCount = 0,
                            VehicleParkId = 3
                        });
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.VehiclePark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("VehicleParks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adress = "Bulgaria Sofia City Mladost 4",
                            Description = "Your eastern oportunity to find out the best ranting offer!",
                            Email = "eastern_rent@abv.bg",
                            ImageUrl = "https://travelwest.info/app/uploads/2022/04/Portway-Park-Ride-Car-Park-1349x900.jpg.webp",
                            Name = "Eastern Park",
                            Phone = "+359878128343"
                        },
                        new
                        {
                            Id = 2,
                            Adress = "Bulgaria Sofia City Iskar Str. 36",
                            Description = "Your central oportunity to find out the best ranting offer!",
                            Email = "central_rent@abv.bg",
                            ImageUrl = "https://s.driving-tests.org/wp-content/uploads/2012/02/back-parking.webp",
                            Name = "Central Park",
                            Phone = "+359878128344"
                        },
                        new
                        {
                            Id = 3,
                            Adress = "Bulgaria Sofia City Lulin 2",
                            Description = "Your western oportunity to find out the best ranting offer!",
                            Email = "estern_rent@abv.bg",
                            ImageUrl = "https://d193ppza2qrruo.cloudfront.net/production/images/Multi-storey-car-park-tips.jpg",
                            Name = "Western Park",
                            Phone = "+359878128345"
                        });
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.WashingCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VehicleParkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleParkId");

                    b.ToTable("WashingCenter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.PartsOrder", b =>
                {
                    b.HasOne("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Vehicle", "Vehicle")
                        .WithMany("OrderedParts")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.RepairCenter", b =>
                {
                    b.HasOne("MunicipalityMobilitySystem.Infrasructure.Data.Entities.VehiclePark", "VehiclePark")
                        .WithMany("Services")
                        .HasForeignKey("VehicleParkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehiclePark");
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Vehicle", b =>
                {
                    b.HasOne("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Category", "Category")
                        .WithMany("Vehicles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MunicipalityMobilitySystem.Infrasructure.Data.Entities.RepairCenter", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("RepairCenterId");

                    b.HasOne("MunicipalityMobilitySystem.Infrasructure.Data.Entities.VehiclePark", "VehiclePark")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleParkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MunicipalityMobilitySystem.Infrasructure.Data.Entities.WashingCenter", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("WashingCenterId");

                    b.Navigation("Category");

                    b.Navigation("VehiclePark");
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.WashingCenter", b =>
                {
                    b.HasOne("MunicipalityMobilitySystem.Infrasructure.Data.Entities.VehiclePark", "VehiclePark")
                        .WithMany("VehicleWashes")
                        .HasForeignKey("VehicleParkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehiclePark");
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Category", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.RepairCenter", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.Vehicle", b =>
                {
                    b.Navigation("OrderedParts");
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.VehiclePark", b =>
                {
                    b.Navigation("Services");

                    b.Navigation("VehicleWashes");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("MunicipalityMobilitySystem.Infrasructure.Data.Entities.WashingCenter", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
